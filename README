# wget

A wget clone implemented in Rust, with support for downloading individual files, multiple files, and mirroring websites.

## Features

- Download a single file from a URL
- Download a file and save it with a different name
- Download a file to a specific directory
- Limit download speed
- Download files in the background
- Download multiple files concurrently
- Mirror websites with customizable options

## Build Instructions

To build the project:

```bash
cargo build --release
```

## Usage

### Basic Usage

Download a file:

```bash
./wget https://example.com/file.zip
```

### Available Flags

- `-O=<filename>`: Save the downloaded file with a different name
- `-P=<directory>`: Save the file in a specific directory
- `-B`: Download in background, output to "wget-log"
- `--rate-limit=<rate>`: Limit download speed (e.g., 200k, 2M)
- `-i=<filename>`: Download multiple files listed in the specified file
- `--mirror`: Mirror a website
  - `-R=<extensions>`: Reject files with specific extensions (e.g., jpg,gif)
  - `-X=<paths>`: Exclude specific paths (e.g., /assets,/css)
  - `--convert-links`: Convert links for offline viewing

### Examples

Download a file and save it as "meme.jpg":

```bash
./wget -O=meme.jpg https://example.com/image.jpg
```

Download a file to the Downloads directory:

```bash
./wget -P=~/Downloads/ https://example.com/file.zip
```

Limit download speed to 400 KB/s:

```bash
./wget --rate-limit=400k https://example.com/large-file.zip
```

Download multiple files from a list:

```bash
./wget -i=download.txt
```

Mirror a website:

```bash
./wget --mirror https://example.com
```

Mirror a website, excluding certain file types:

```bash
./wget --mirror -R=jpg,gif https://example.com
```

Mirror a website, excluding certain paths:

```bash
./wget --mirror -X=/assets,/css https://example.com
```

Mirror a website and convert links for offline viewing:

```bash
./wget --mirror --convert-links https://example.com
```

## Project Structure

- `src/main.rs`: Main entry point
- `src/cli.rs`: Command line argument parsing
- `src/downloader.rs`: Core download functionality
- `src/mirror.rs`: Website mirroring functionality
- `src/logger.rs`: Logging and output formatting
- `src/progress.rs`: Progress bar implementation

## Dependencies

- `clap`: Command line argument parsing
- `reqwest`: HTTP client
- `tokio`: Async runtime
- `futures`: Async utilities
- `indicatif`: Progress bars
- `chrono`: Time formatting
- `url`: URL parsing
- `scraper`: HTML parsing
- and more (see Cargo.toml for a complete list)

## Contributors

- great team